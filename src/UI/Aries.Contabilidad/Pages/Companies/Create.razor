@page "/companies/create"
@using Aries.Contabilidad.Models.DTOs
@using Aries.Contabilidad.Services
@inject IClientCompanyService CompanyService
@inject NavigationManager NavigationManager

<div class="container-fluid">
    <h3 class="mb-4">Maestro de Compañías</h3>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else
    {
        <CompanyForm 
            Company="@company"
            ButtonText="Guardar"
            OnValidSubmit="@HandleValidSubmit"
            OnCancel="@HandleCancel"
            OnClear="@HandleClear"
            NextCompanyCode="@nextCompanyCode" />
    }
</div>

@code {
    private CompanyDto company = new();
    private string nextCompanyCode;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await CompanyService.GetNextCompanyCode();
            nextCompanyCode = response.Code;
            company.Code = nextCompanyCode;
            isLoading = false;
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling
            Console.WriteLine($"Error fetching company code: {ex}");
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isLoading = true;
            company.CreatedAt = DateTime.Now;
            company.UpdateAt = DateTime.Now;
            company.Active = true;
            company.IsActive = true;
            
            await CompanyService.CreateCompanyAsync(company);
            NavigationManager.NavigateTo("/companies");
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling
            Console.WriteLine($"Error creating company: {ex}");
            isLoading = false;
        }
    }

    private void HandleCancel()
    {
        NavigationManager.NavigateTo("/companies");
    }

    private async Task HandleClear()
    {
        try
        {
            isLoading = true;
            var response = await CompanyService.GetNextCompanyCode();
            company = new CompanyDto
            {
                Code = response.Code,
                IsActive = true
            };
            isLoading = false;
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling
            Console.WriteLine($"Error clearing form: {ex}");
            isLoading = false;
        }
    }
} 