@page "/companies"
@using Aries.Contabilidad.Models.DTOs
@using Aries.Contabilidad.Services
@inject IClientCompanyService CompanyService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Companies</h3>

<div class="mb-3">
    <a href="/companies/create" class="btn btn-primary">Create New Company</a>
</div>

@if (companies == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Code</th>
                <th>Name</th>
                <th>ID Type</th>
                <th>Number ID</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var company in companies)
            {
                <tr>
                    <td>@company.Code</td>
                    <td>@company.CompanyName</td>
                    <td>@company.IdType</td>
                    <td>@company.NumberId</td>
                    <td>
                        <a href="/companies/edit/@company.Id" class="btn btn-sm btn-primary">Edit</a>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCompany(company.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<CompanyDto>? companies;

    protected override async Task OnInitializedAsync()
    {
        companies = await CompanyService.GetAllCompaniesAsync();
    }

    private async Task DeleteCompany(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this company?"))
        {
            await CompanyService.DeleteCompanyAsync(id);
            companies = await CompanyService.GetAllCompaniesAsync();
        }
    }
} 